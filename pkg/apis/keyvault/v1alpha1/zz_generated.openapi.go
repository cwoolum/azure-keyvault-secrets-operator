// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"pkg/apis/keyvault/v1alpha1.KeyVaultMap":               schema_pkg_apis_keyvault_v1alpha1_KeyVaultMap(ref),
		"pkg/apis/keyvault/v1alpha1.KeyVaultMapSpec":           schema_pkg_apis_keyvault_v1alpha1_KeyVaultMapSpec(ref),
		"pkg/apis/keyvault/v1alpha1.KeyVaultMapStatus":         schema_pkg_apis_keyvault_v1alpha1_KeyVaultMapStatus(ref),
		"pkg/apis/keyvault/v1alpha1.KeyVaultSecretBindingSpec": schema_pkg_apis_keyvault_v1alpha1_KeyVaultSecretBindingSpec(ref),
	}
}

func schema_pkg_apis_keyvault_v1alpha1_KeyVaultMap(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeyVaultMap is the Schema for the keyvaultmaps API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("pkg/apis/keyvault/v1alpha1.KeyVaultMapSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("pkg/apis/keyvault/v1alpha1.KeyVaultMapStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "pkg/apis/keyvault/v1alpha1.KeyVaultMapSpec", "pkg/apis/keyvault/v1alpha1.KeyVaultMapStatus"},
	}
}

func schema_pkg_apis_keyvault_v1alpha1_KeyVaultMapSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeyVaultMapSpec defines the desired state of KeyVaultMap",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"vault-name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tenant-id": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"credentials": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("pkg/apis/keyvault/v1alpha1.KeyVaultCredentialsSpec"),
						},
					},
					"mappings": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("pkg/apis/keyvault/v1alpha1.KeyVaultSecretBindingSpec"),
									},
								},
							},
						},
					},
				},
				Required: []string{"vault-name", "tenant-id", "credentials", "mappings"},
			},
		},
		Dependencies: []string{
			"pkg/apis/keyvault/v1alpha1.KeyVaultCredentialsSpec", "pkg/apis/keyvault/v1alpha1.KeyVaultSecretBindingSpec"},
	}
}

func schema_pkg_apis_keyvault_v1alpha1_KeyVaultMapStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeyVaultMapStatus defines the observed state of KeyVaultMap",
				Type:        []string{"object"},
			},
		},
	}
}

func schema_pkg_apis_keyvault_v1alpha1_KeyVaultSecretBindingSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KeyVaultSecretBindingSpec defines the desired state of KeyVaultMap",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secret-name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"environment-variable-mapping": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"secret-name", "environment-variable-mapping"},
			},
		},
	}
}
